Angular udemy
Id: amrish.kumar@mindtree.com
Password: @@June1234

https://github.com/spring-io/sagan
https://github.com/openzipkin/zipkin
https://github.com/Libresonic/libresonic
https://github.com/aol/micro-server


let me inform you that i have experienced in java spring mvc, rest web service and hibernate and have done poc on spring boot, micro service, and angular 8  and trained on GCP, spring boot



C:\Users\M1048474\Documents\sts-bundle\pivotal-tc-server\instances\base-instance\backup

https://springframework.guru/spring-requestmapping-annotation/

https://docs.spring.io/spring-boot/docs/current/reference/html/getting-started-first-application.html

https://www.mkyong.com/spring-boot/spring-boot-hello-world-example-jsp/


https://www.springboottutorial.com/spring-boot-crud-rest-service-with-jpa-hibernate
https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/
https://loiane.com/2019/01/crud-rest-api-using-spring-boot-2-hibernate-jpa-and-mysql/
http://websystique.com/spring-boot/spring-boot-rest-api-example/
http://candidjava.com/tutorial/spring-boot-rest-service-example/
https://www.javainterviewpoint.com/spring-boot-restful-web-services-example/
    

200 - SUCESS
404 - RESOURCE NOT FOUND
400 - BAD REQUEST
201 - CREATED
401 - UNAUTHORIZED
415 - UNSUPPORTED TYPE - Representation not supported for the resource
500 - SERVER ERROR


 https://www.udemy.com/the-complete-guide-to-angular-2/learn/lecture/6709112#questions/8079942


@SpringBootApplication
@EnableDiscoveryClient
@EnableFeignClients
@EnableHystrixDashboard
@EnableCircuitBreaker
@EnableSwagger2
@Configuration
@FeignClient(name = "mystay-catalog-service")
@RibbonClient(name = "mystay-catalog-service")
@FeignClient(name = "mystay-payment-service")
@RibbonClient(name = "mystay-payment-service")
@SpringBootApplication
@EnableConfigServer
@SpringBootApplication
@EnableDiscoveryClient
@EnableCircuitBreaker
@EnableHystrixDashboard
@EnableHystrixDashboard
@EnableEurekaClient
@EnableCircuitBreaker
@SpringBootApplication
@EnableFeignClients
@EnableHystrixDashboard
@EnableTurbine
@SpringBootApplication
@SpringBootApplication
@EnableZuulProxy
@EnableEurekaClient
@Configuration
@EnableAuthorizationServer
@PropertySource("classpath:bootstrap.properties")
@SuppressWarnings("deprecation")
@Configuration
@EnableWebSecurity
@Configuration
@EnableResourceServer
@PropertySource("classpath:bootstrap.properties")



#management.security.enabled=false
#management.endpoint.health.show-details=when-authorized
#management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoints.web.exposure.include=info,health

#Port where mosip spring cloud config server needs to run
server.port = 51000

#adding context path
server.servlet.path=/config

# Uncomment spring.cloud.config.server.git.uri and spring.cloud.config.server.git.search-paths for # connecting to git Repo for configuration.
#################################################################
#Git repository location where configuration files are stored
spring.cloud.config.server.git.uri=<git-url>

spring.cloud.config.server.git.search-paths=config
spring.cloud.config.server.git.password=<password>
spring.cloud.config.server.git.username=<user>


# Uncomment spring.profiles.active and spring.cloud.config.server.native.search-locations for     # connecting to local file system for configuration.
#################################################################
# spring.profiles.active=native

# spring.cloud.config.server.native.search-locations=file:///<config-location-on-your-system>

#Server would return a HTTP 404 status, if the application is not found.By default, this flag is set to true.
spring.cloud.config.server.accept-empty=false

#Spring Cloud Config Server makes a clone of the remote git repository and if somehow the local copy gets 
#dirty (e.g. folder content changes by OS process) so Spring Cloud Config Server cannot update the local copy
#from remote repository. For Force-pull in such case, we are setting the flag to true.
spring.cloud.config.server.git.force-pull=true

# Disabling health endpoints to improve performance of config server while in development, can be commented out in production.
health.config.enabled=false

# Setting up refresh rate to 5 seconds so that config server will check for updates in Git repo after every one minute,
#can be lowered down for production.
spring.cloud.config.server.git.refreshRate=5


# adding provision to clone on start of server instead of first request
spring.cloud.config.server.git.cloneOnStart=true

#For encryption of properties
###########################################
#pass at runtime
#encrypt.keyStore.location=file:///<your-encryption-keyStore-path>
#encrypt.keyStore.password=<your-encryption-keyStore-password>
#encrypt.keyStore.alias=<your-encryption-keyStore-alias>
#encrypt.keyStore.secret=<your-encryption-keyStore-secret>




